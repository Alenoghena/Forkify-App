"use strict";

require("core-js/modules/es.regexp.flags.js");
require("core-js/modules/web.immediate.js");
var model = _interopRequireWildcard(require("./model.js"));
var _recipeview = _interopRequireDefault(require("./views/recipeview.js"));
var _helpers = require("./helpers.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
//async/await

const recipeContainer = document.querySelector('.recipe');

// https://forkify-api.herokuapp.com/v2

///////////////////////////////////////

// timeout(5);
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    console.log(id);
    //Guard clause
    if (!id) return;

    //1. loading recipe

    await model.loadRecipe(id); //this does not return anything, so we won't store it on any variable
    //const { recipe } = model.state; //Destructure

    _recipeview.default.renderSpinner();

    //The question mark in url indicates a query string. It is most common way of basically sending variables over url. search is like variables and pizza like values. So search is query string and pizza what we want to search for.

    //2. Rendering recipe
    _recipeview.default.render(model.state.recipe);

    //const recipeview = new RecipeView(model.state.recipe);
    //We used below ${icons} to replace src/img/icons.svg after importing above
  } catch (err) {
    _recipeview.default.renderError();
    _recipeview.default.renderMessage();
  }
};

// controlRecipes();

// window.addEventListener('hashchange', controlRecipes);
// window.addEventListener('load', controlRecipes);

//Subscriber function
const init = function () {
  _recipeview.default.addHandlerRender(controlRecipes);
};
init();
// console.log(new Date().getMonth());
// console.log(Date.now());
// console.log('TEST');