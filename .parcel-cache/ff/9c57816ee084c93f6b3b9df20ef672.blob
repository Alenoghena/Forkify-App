"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _view = _interopRequireDefault(require("./view.js"));
var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));
var _fractional = require("fractional");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// import icons from '../img/icons.svg';//Parcel 1
//Parcel2-Non progamming files(static assets)

console.log(_fractional.Fraction);
class RecipeView extends _view.default {
  _parentEl = document.querySelector('.recipe');
  _errorMessage = 'We could not find that recipe. Please try another one';
  _message = '';
  addHandlerBookmark = function (handler) {
    this._parentEl.addEventListener('click', function (e) {
      const btn = e.target.closest('.btn--bookmark');
      if (!btn) return;
      console.log(btn);
      if (!btn.classList.contains('fill')) {
        btn.classList.add('fill');
        handler();
      }
    });
  };
  _generateMarkup() {
    return `<figure class="recipe__fig">
        <img src="${this._data.image}" alt="Tomato" class="recipe__img" />
        <h1 class="recipe__title">
          <span>${this._data.title}</span>
        </h1>
      </figure>
    
      <div class="recipe__details">
        <div class="recipe__info">
          <svg class="recipe__info-icon">
            <use href="${_icons.default}#icon-clock"></use>
          </svg>
          <span class="recipe__info-data recipe__info-data--minutes">${this._data.cookingTime}</span>
          <span class="recipe__info-text">minutes</span>
        </div>
        <div class="recipe__info">
          <svg class="recipe__info-icon">
            <use href="${_icons.default}#icon-users"></use>
          </svg>
          <span class="recipe__info-data recipe__info-data--people">${this._data.servings}</span>
          <span class="recipe__info-text">servings</span>
    
          <div class="recipe__info-buttons">
            <button data-update-to="${this._data.servings - 1}" class="btn--tiny btn--update-servings">
              <svg>
                <use href="${_icons.default}#icon-minus-circle"></use>
              </svg>
            </button>
            <button data-update-to="${this._data.servings + 1}" class="btn--tiny btn--update-servings">
              <svg>
                <use href="${_icons.default}#icon-plus-circle"></use>
              </svg>
            </button>
          </div>
        </div>
    
        <div class="recipe__user-generated">
          <svg>
            <use href="${_icons.default}#icon-user"></use>
          </svg>
        </div>
        <button class="btn--round btn--bookmark-fill">
          <svg class="">
            <use href="${_icons.default}#icon-bookmark"></use>
          </svg>
        </button>
      </div>
    
      <div class="recipe__ingredients">
        <h2 class="heading--2">Recipe ingredients</h2>
        <ul class="recipe__ingredient-list">
        ${this._data.ingredients.map(this._generateMarkupIngredient).join('')}
          
        </ul>
      </div>
    s
      <div class="recipe__directions">
        <h2 class="heading--2">How to cook it</h2>
        <p class="recipe__directions-text">
          This recipe was carefully designed and tested by
          <span class="recipe__publisher">${this._data.publisher}</span>. Please check out
          directions at their website.
        </p>
        <a
          class="btn--small recipe__btn"
          href="${this._data.sourceUrl}"
          target="_blank"
        >
          <span>Directions</span>
          <svg class="search__icon">
            <use href="${_icons.default}#icon-arrow-right"></use>
          </svg>
        </a>
      </div>`;
  }

  //Publisher function
  addHandlerRender(handler) {
    ['hashchange', 'load'].forEach(ev => window.addEventListener(ev, handler)); // The hash is anything after the hash in the url. It changes anytime a new search is initiated.
  }

  addHandlerUpdateServings(handler) {
    this._parentEl.addEventListener('click', function (e) {
      const btn = e.target.closest('.btn--update-servings'); //btn--tiny is more of style while btn--update-servings, more of functionality. we can use either.
      if (!btn) return;
      console.log(btn);
      const btnUpdateTo = +btn.dataset.updateTo;
      //we can also destructure as below. It will be a string which needs conversion to Number
      /// const {btnUpdate} = btn.dataset;handler(+btnUdate)
      if (btnUpdateTo > 0) handler(btnUpdateTo);
    });
  }
  _generateMarkupIngredient(ing) {
    return `<li class="recipe__ingredient">
      <svg class="recipe__icon">
        <use href="${_icons.default}#icon-check"></use>
      </svg>
      <div class="recipe__quantity">${ing.quantity ? new _fractional.Fraction(ing.quantity).toString() : ''}</div>
      <div class="recipe__description">
        <span class="recipe__unit">${ing.unit}</span>
        ${ing.description}
      </div>
     </li>`;
  }
}
var _default = new RecipeView();
exports.default = _default;